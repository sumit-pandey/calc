{"version":3,"sources":["components/Input.js","components/Button.js","components/clearbutton.js","components/evaluate.js","App.js","serviceWorker.js","index.js"],"names":["Input","input","className","Button","props","onClick","handleClick","children","Clearbutton","handleClear","Equal","addInput","App","state","e","setState","target","textContent","evaluate","this","Component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"4SAQeA,G,OALD,SAAC,GAAD,IAAGC,EAAH,EAAGA,MAAH,OACZ,yBAAKC,UAAU,SACb,4BAAKD,MCEME,G,OALA,SAAAC,GAAK,OAClB,yBAAKF,UAAU,MAAMG,QAASD,EAAME,aACjCF,EAAMG,YCKIC,G,cALK,SAAAJ,GAAK,OACvB,yBAAKF,UAAU,QAAQG,QAASD,EAAMK,aAAtC,WCKaC,G,OAPD,SAAAN,GACZ,OACE,yBAAKF,UAAU,QAAQG,QAASD,EAAMO,UAAtC,O,SCiDWC,G,kNA7CbC,MAAQ,CACNZ,MAAO,K,EAGTK,YAAc,SAAAQ,GACZ,EAAKC,SAAS,CAAEd,MAAO,EAAKY,MAAMZ,MAAQa,EAAEE,OAAOC,e,EAErDR,YAAc,WACZ,EAAKM,SAAS,CACZd,MAAO,O,EAGXU,SAAW,WACT,EAAKI,SAAS,CACZd,MAAOiB,YAAS,EAAKL,MAAMZ,U,wEAK7B,OACE,yBAAKC,UAAU,WACb,kBAAC,EAAD,CAAOD,MAAOkB,KAAKN,MAAMZ,QACzB,yBAAKC,UAAU,OACb,kBAAC,EAAD,CAAQI,YAAaa,KAAKb,aAA1B,KACA,kBAAC,EAAD,CAAQA,YAAaa,KAAKb,aAA1B,KACA,kBAAC,EAAD,CAAQA,YAAaa,KAAKb,aAA1B,KACA,kBAAC,EAAD,CAAQA,YAAaa,KAAKb,aAA1B,KACA,kBAAC,EAAD,CAAQA,YAAaa,KAAKb,aAA1B,KACA,kBAAC,EAAD,CAAQA,YAAaa,KAAKb,aAA1B,KACA,kBAAC,EAAD,CAAQA,YAAaa,KAAKb,aAA1B,KACA,kBAAC,EAAD,CAAQA,YAAaa,KAAKb,aAA1B,KACA,kBAAC,EAAD,CAAQA,YAAaa,KAAKb,aAA1B,KACA,kBAAC,EAAD,CAAQA,YAAaa,KAAKb,aAA1B,KACA,kBAAC,EAAD,CAAQA,YAAaa,KAAKb,aAA1B,KACA,kBAAC,EAAD,CAAQA,YAAaa,KAAKb,aAA1B,KACA,kBAAC,EAAD,CAAQA,YAAaa,KAAKb,aAA1B,KACA,kBAAC,EAAD,CAAOK,SAAUQ,KAAKR,WACtB,kBAAC,EAAD,CAAQL,YAAaa,KAAKb,aAA1B,KACA,kBAAC,EAAD,CAAaG,YAAaU,KAAKV,oB,GAvCvBW,cCIEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC,gB","file":"static/js/main.ce0759d5.chunk.js","sourcesContent":["import React from \"react\";\nimport \"./input.css\";\n\nconst Input = ({ input }) => (\n  <div className=\"input\">\n    <h1>{input}</h1>\n  </div>\n);\nexport default Input;\n","import React from \"react\";\nimport \"./button.css\";\nconst Button = props => (\n  <div className=\"btn\" onClick={props.handleClick}>\n    {props.children}\n  </div>\n);\nexport default Button;\n","import React from \"react\";\nimport \"./clearbutton.css\";\nimport { tsPropertySignature } from \"@babel/types\";\n\nconst Clearbutton = props => (\n  <div className=\"clear\" onClick={props.handleClear}>\n    clear\n  </div>\n);\nexport default Clearbutton;\n","import React from \"react\";\nimport \"./evaluate.css\";\n\nconst Equal = props => {\n  return (\n    <div className=\"equal\" onClick={props.addInput}>\n      =\n    </div>\n  );\n};\nexport default Equal;\n","import React, { Component } from \"react\";\nimport Input from \"./components/Input\";\nimport Button from \"./components/Button\";\nimport Clearbutton from \"./components/clearbutton\";\nimport Equal from \"./components/evaluate\";\nimport { evaluate } from \"mathjs\";\nimport \"./App.css\";\n\nclass App extends Component {\n  state = {\n    input: \"0\"\n  };\n\n  handleClick = e => {\n    this.setState({ input: this.state.input + e.target.textContent });\n  };\n  handleClear = () => {\n    this.setState({\n      input: \"0\"\n    });\n  };\n  addInput = () => {\n    this.setState({\n      input: evaluate(this.state.input)\n    });\n  };\n\n  render() {\n    return (\n      <div className=\"wrapper\">\n        <Input input={this.state.input} />\n        <div className=\"app\">\n          <Button handleClick={this.handleClick}>7</Button>\n          <Button handleClick={this.handleClick}>8</Button>\n          <Button handleClick={this.handleClick}>9</Button>\n          <Button handleClick={this.handleClick}>/</Button>\n          <Button handleClick={this.handleClick}>4</Button>\n          <Button handleClick={this.handleClick}>5</Button>\n          <Button handleClick={this.handleClick}>6</Button>\n          <Button handleClick={this.handleClick}>*</Button>\n          <Button handleClick={this.handleClick}>1</Button>\n          <Button handleClick={this.handleClick}>2</Button>\n          <Button handleClick={this.handleClick}>3</Button>\n          <Button handleClick={this.handleClick}>+</Button>\n          <Button handleClick={this.handleClick}>0</Button>\n          <Equal addInput={this.addInput} />\n          <Button handleClick={this.handleClick}>-</Button>\n          <Clearbutton handleClear={this.handleClear} />\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}